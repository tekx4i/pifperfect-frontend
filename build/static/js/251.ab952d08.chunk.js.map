{"version":3,"file":"static/js/251.ab952d08.chunk.js","mappings":"iQAQA,MA8IA,EA9I0BA,IAAsB,IAADC,EAAAC,EAAA,IAApB,IAAEC,EAAG,OAAEC,GAAQJ,EACxC,MAAOK,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GACrCC,EAAQC,aAAaC,QAAQ,UAE5BC,EAAMC,IAAWL,EAAAA,EAAAA,UAAS,CAAC,IAC3BM,EAAoBC,IAAyBP,EAAAA,EAAAA,UAAS,KACtDQ,EAAWC,IAAgBT,EAAAA,EAAAA,WAAS,IAErC,kBAAEU,GAAsBC,CAAAA,kBAAAA,4DA0C9BC,EAAAA,EAAAA,YAAU,KA7BaC,WACrBd,GAAa,GACb,IACE,MAAMe,EAAM,GAAGJ,qBAAqCb,IAC9CkB,QAAiBC,EAAAA,EAAAA,IAAOF,EAAK,CAAC,EAAGb,GAEvC,GAAIc,EAASE,QAAS,CACpB,MAAMC,EAAiBH,EAASX,KAAKc,gBAAkB,GAEjDC,EAA4B,GAClCD,EAAeE,SAASC,IACtBA,EAASC,YAAYF,SAASG,IACxBA,EAAWC,kBAAoBD,EAAWC,iBAAiBC,OAAS,GACtEN,EAA0BO,KAAKH,EAAWI,GAC5C,GACA,IAGJpB,EAAsBY,GACtBd,EAAQU,GACRN,GAAa,EACf,CACF,CAAE,MAAOmB,GACPC,QAAQD,MAAM,8BAA+BA,EAC/C,CAAC,QACC7B,GAAa,EACf,GAIA+B,EAAgB,GACf,CAACjC,IAwBJ,OAIEkC,EAAAA,EAAAA,MAAA,OAAKJ,GAAG,mBAAkBK,SAAA,CACvBlC,GACCmC,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CAACC,UAAU,UAAUC,eAAe,UAASJ,UACzDC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBL,SAC7BM,MAAM,GACJC,KAAK,GACLC,KAAI,CAACC,EAAGC,KACPX,EAAAA,EAAAA,MAAA,OAAeM,UAAU,gBAAeL,SAAA,EACtCC,EAAAA,EAAAA,KAACU,EAAAA,EAAQ,CAACC,MAAO,IAAKC,OAAQ,MAC9Bd,EAAAA,EAAAA,MAAA,OAAKM,UAAU,WAAUL,SAAA,EACvBD,EAAAA,EAAAA,MAAA,OAAKM,UAAU,WAAUL,SAAA,EACvBC,EAAAA,EAAAA,KAACU,EAAAA,EAAQ,CAACC,MAAO,IAAKC,OAAQ,MAC9BZ,EAAAA,EAAAA,KAACU,EAAAA,EAAQ,CAACC,MAAO,GAAIC,OAAQ,GAAIR,UAAU,aAE7CN,EAAAA,EAAAA,MAAA,OAAKM,UAAU,WAAUL,SAAA,EACvBC,EAAAA,EAAAA,KAACU,EAAAA,EAAQ,CAACC,MAAO,IAAKC,OAAQ,MAC9BZ,EAAAA,EAAAA,KAACU,EAAAA,EAAQ,CAACC,MAAO,GAAIC,OAAQ,GAAIR,UAAU,gBAG/CJ,EAAAA,EAAAA,KAAA,MAAII,UAAU,kBAZNK,SAkBT,QAFOhD,EAEhBU,EAAKA,YAAI,IAAAV,GAAgB,QAAhBC,EAATD,EAAWwB,sBAAc,IAAAvB,OAAhB,EAATA,EAA2B6C,KAAKnB,IAC9BU,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKX,EAASyB,QACdb,EAAAA,EAAAA,KAAA,OAAKI,UAAU,MAAKL,SACjBX,EAASC,YAAYkB,KAAKjB,IACzBU,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUL,UACvBD,EAAAA,EAAAA,MAAA,OAAKM,UAAU,gBAAeL,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,KAAAD,SAAIT,EAAWuB,QACfb,EAAAA,EAAAA,KAAA,OAAKI,UAAU,SAAQL,UACrBC,EAAAA,EAAAA,KAACc,EAAAA,EAAS,CAACC,QAAM,EAAAhB,UACfC,EAAAA,EAAAA,KAACgB,EAAAA,EAAK,CACJC,KAAK,SACLC,QAAS7C,EAAmB8C,SAAS7B,EAAWI,IAChD0B,SAAUA,KAAMC,OA5GlBC,EA4G+BhC,EAAWI,QA3G9DpB,GAAuBiD,IACrB,MAAMC,EAAqBD,EAAKJ,SAASG,GACrCC,EAAKE,QAAQ/B,GAAOA,IAAO4B,IAC3B,IAAIC,EAAMD,GAGd,OADA9C,GAAa,GACNgD,CAAkB,IAPPF,KA4G8C,YARvBhC,EAAWI,SAgB9CM,EAAAA,EAAAA,KAAA,MAAII,UAAU,aApBNhB,EAASM,OAwBvBI,EAAAA,EAAAA,MAAA,UAAQmB,KAAK,SAASS,QA5EA9C,UACxB,IAAKL,EAAW,OAEhB,MAAMoD,EAAS,CACb/D,OAAQA,EACRyB,YAAahB,GAGf,IACE,MAAMQ,EAAM,GAAGJ,6BAEQmD,EAAAA,EAAAA,IAAO/C,EAAK8C,EAAQ3D,IAC9BgB,OAEf,CAAE,MAAOW,GACPC,QAAQD,MAAM,8BAA+BA,EAC/C,CAAC,QACCnB,GAAa,EACf,GA0DoD4B,UAAU,oBAAmBL,SAAA,EAC7EC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAQ,CAACC,IAAKC,EAAAA,IAAe,oBAE5B,C","sources":["pages/NewPages/Security/Components/AssignPermissions.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { FormGroup, Input } from \"reactstrap\";\r\nimport { apiGet, apiPut } from \"../../../../CustomHooks/useAuth\";\r\nimport { ReactSVG } from \"react-svg\";\r\nimport refreshIcon from \"../../../../assets/newImages/refresh-2.svg\";\r\nimport Skeleton, { SkeletonTheme } from \"react-loading-skeleton\"; // Professional skeleton loader library\r\nimport \"react-loading-skeleton/dist/skeleton.css\";\r\n\r\nconst AssignPermissions = ({ tab, roleId }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const token = localStorage.getItem(\"token\");\r\n\r\n  const [data, setData] = useState({});\r\n  const [checkedPermissions, setCheckedPermissions] = useState([]);\r\n  const [isUpdated, setIsUpdated] = useState(false);\r\n\r\n  const { REACT_APP_API_URL } = process.env;\r\n\r\n  const handleToggle = (permissionId) => {\r\n    setCheckedPermissions((prev) => {\r\n      const updatedPermissions = prev.includes(permissionId)\r\n        ? prev.filter((id) => id !== permissionId)\r\n        : [...prev, permissionId];\r\n\r\n      setIsUpdated(true);\r\n      return updatedPermissions;\r\n    });\r\n  };\r\n\r\n  const getPermissions = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const url = `${REACT_APP_API_URL}permissions/role/${roleId}`;\r\n      const response = await apiGet(url, {}, token);\r\n\r\n      if (response.success) {\r\n        const allPermissions = response.data.allPermissions || [];\r\n\r\n        const initialCheckedPermissions = [];\r\n        allPermissions.forEach((category) => {\r\n          category.permissions.forEach((permission) => {\r\n            if (permission.role_permissions && permission.role_permissions.length > 0) {\r\n              initialCheckedPermissions.push(permission.id);\r\n            }\r\n          });\r\n        });\r\n\r\n        setCheckedPermissions(initialCheckedPermissions);\r\n        setData(response);\r\n        setIsUpdated(false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching permissions:\", error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getPermissions();\r\n  }, [roleId]);\r\n\r\n  const updatePermissions = async () => {\r\n    if (!isUpdated) return;\r\n\r\n    const params = {\r\n      roleId: roleId,\r\n      permissions: checkedPermissions,\r\n    };\r\n\r\n    try {\r\n      const url = `${REACT_APP_API_URL}permissions/assign`;\r\n\r\n      const response = await apiPut(url, params, token);\r\n      if (response.success) {\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error updating permissions:\", error);\r\n    } finally {\r\n      setIsUpdated(false);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n\r\n    \r\n      // data.data.allPermissions > 0 ? (\r\n    <div id=\"assignPermission\">\r\n      {isLoading ? (\r\n        <SkeletonTheme baseColor=\"#f0f0f0\" highlightColor=\"#e0e0e0\">\r\n          <div className=\"skeleton-loader\">\r\n            {Array(5)\r\n              .fill(0)\r\n              .map((_, idx) => (\r\n                <div key={idx} className=\"skeleton-item\">\r\n                  <Skeleton width={200} height={25} />\r\n                  <div className=\"row mt-3\">\r\n                    <div className=\"col-md-6\">\r\n                      <Skeleton width={150} height={20} />\r\n                      <Skeleton width={50} height={25} className=\"mt-2\" />\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                      <Skeleton width={150} height={20} />\r\n                      <Skeleton width={50} height={25} className=\"mt-2\" />\r\n                    </div>\r\n                  </div>\r\n                  <hr className=\"ctm-hr mt-4\" />\r\n                </div>\r\n              ))}\r\n          </div>\r\n        </SkeletonTheme>\r\n      ) : (\r\n        data.data?.allPermissions?.map((category) => (\r\n          <div key={category.id}>\r\n            <h5>{category.name}</h5>\r\n            <div className=\"row\">\r\n              {category.permissions.map((permission) => (\r\n                <div className=\"col-md-6\" key={permission.id}>\r\n                  <div className=\"switch_custom\">\r\n                    <p>{permission.name}</p>\r\n                    <div className=\"switch\">\r\n                      <FormGroup switch>\r\n                        <Input\r\n                          type=\"switch\"\r\n                          checked={checkedPermissions.includes(permission.id)}\r\n                          onChange={() => handleToggle(permission.id)}\r\n                        />\r\n                      </FormGroup>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <hr className=\"ctm-hr\" />\r\n          </div>\r\n        ))\r\n      )}\r\n      <button type=\"button\" onClick={updatePermissions} className=\"custom_submit_btn\">\r\n        <ReactSVG src={refreshIcon} />Save Changes\r\n      </button>\r\n    </div>\r\n      )\r\n\r\n    // : \"asdasdasd\"\r\n    \r\n    \r\n  // );\r\n};\r\n\r\nexport default AssignPermissions;\r\n"],"names":["_ref","_data$data","_data$data$allPermiss","tab","roleId","isLoading","setIsLoading","useState","token","localStorage","getItem","data","setData","checkedPermissions","setCheckedPermissions","isUpdated","setIsUpdated","REACT_APP_API_URL","process","useEffect","async","url","response","apiGet","success","allPermissions","initialCheckedPermissions","forEach","category","permissions","permission","role_permissions","length","push","id","error","console","getPermissions","_jsxs","children","_jsx","SkeletonTheme","baseColor","highlightColor","className","Array","fill","map","_","idx","Skeleton","width","height","name","FormGroup","switch","Input","type","checked","includes","onChange","handleToggle","permissionId","prev","updatedPermissions","filter","onClick","params","apiPut","ReactSVG","src","refreshIcon"],"sourceRoot":""}